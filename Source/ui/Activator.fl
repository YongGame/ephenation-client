# data file for the Fltk User Interface Designer (fluid)
version 1.0110 
header_name {.h} 
code_name {.cpp}
class Activator {open
} {
  Function {Activator(Fl_Text_Buffer *buf)} {open
  } {
    Fl_Window fWindow {
      label {Configure activator} open selected
      private xywh {583 219 500 395} type Single visible
    } {
      Fl_Tabs {} {open
        xywh {15 4 470 334} align 0
      } {
        Fl_Group {} {
          label Conditions open
          tooltip {Set conditions when the activator block is enabled.} xywh {15 4 470 312} hide
        } {
          Fl_Group {} {open
            xywh {25 14 450 91} box DOWN_FRAME
          } {
            Fl_Check_Button fKeyCondition {
              label {Conditional key:}
              callback {if (fKeyCondition->value()) {
    fCondOwnerKeyId->activate();
    fCondKeyId->activate();
    fCondKeyDescr->activate();
} else {
    fCondOwnerKeyId->deactivate();
    fCondKeyId->deactivate();
    fCondKeyDescr->deactivate();
}}
              tooltip {The text activator depend conditional on a key. The test only applies to one player .} xywh {150 28 28 15} down_box DOWN_BOX align 4 when 1
            }
            Fl_Input fCondKeyId {
              label {Key:}
              tooltip {The unique number of the key} xywh {345 23 55 25} deactivate
            }
            Fl_Input fCondOwnerKeyId {
              label {Owner:}
              tooltip {The ID of the owner that created the key. Leaving it empty will use the current chunk owner.} xywh {345 62 55 25} deactivate
            }
            Fl_Input fCondKeyDescr {
              label {Message:}
              tooltip {A message used if condition fails.} xywh {155 62 87 25} deactivate
            }
          }
          Fl_Input fInhibit {
            label {Inhibit retrigger:}
            tooltip {Minimum number of seconds until the next activation. The default will increase when giving awards.} xywh {221 170 95 25}
          }
          Fl_Input fMinLevel {
            label {Minimum player level:}
            tooltip {The player must be at least this level. It is only tested for the player that triggered the trap.} xywh {221 210 95 25}
          }
          Fl_Input fMaxLevel {
            label {Maximum player level:}
            tooltip {The player must be at most this level. It is only tested for the player that triggered the trap.} xywh {221 250 95 25}
          }
        }
        Fl_Group {} {
          label Actions open
          tooltip {Actions that will happen when the activator block is triggered.} xywh {15 8 470 306}
        } {
          Fl_Check_Button fSpawn {
            label {Spawn monster:}
            callback {if (fSpawn->value()) {
    fMonsterLevel->activate();
} else {
    fMonsterLevel->deactivate();
}}
            tooltip {Spawn a monster, attacking the user immediately.} xywh {145 8 30 20} down_box DOWN_BOX align 4
          }
          Fl_Choice fMonsterLevel {
            label {level modifier} open
            tooltip {The relative level of the monster compared to the default monster level.} xywh {216 8 55 25} down_box BORDER_BOX align 8 deactivate
            code0 {fMonsterLevel->add("-2|-1|0|+1|+2");}
          } {}
          Fl_Choice fSoundeffect {
            label {Sound effect:} open
            tooltip {A sound effect played} xywh {145 41 95 22} down_box BORDER_BOX
          } {}
          Fl_Button {} {
            label Test
            callback {int n = fSoundeffect->value();
if (n != -1)  {
	gSoundControl.RequestTrigSound(gSoundControl.fTrigSoundList[n].id);
}}
            tooltip {Listen to the sound effect now} xywh {262 41 70 20}
            code0 {\#include "../SoundControl.h"}
          }
          Fl_Choice fObject {
            label {Add reward:} open
            tooltip {Give a reward to the player} xywh {145 77 95 22} down_box BORDER_BOX
          } {}
          Fl_Choice fJellyBlock {
            label {Jelly block:} open
            tooltip {Turn block in specified direction transparent for 15s.} xywh {145 113 95 22} down_box BORDER_BOX
          } {}
          Fl_Group {} {open
            xywh {15 188 470 46} box DOWN_FRAME
          } {
            Fl_Check_Button fAddKey {
              label {Add key:}
              callback {if (fAddKey->value()) {
    fKeyDescr->activate();
    fKeyId->activate();
    fKeyPicture->activate();
} else {
    fKeyDescr->deactivate();
    fKeyId->deactivate();
    fKeyPicture->deactivate();
}}
              tooltip {Give a key to the player.} xywh {88 203 28 15} down_box DOWN_BOX align 4 when 1
            }
            Fl_Input fKeyDescr {
              label {Descr:}
              tooltip {The description of the key.} xywh {168 198 87 25} deactivate
            }
            Fl_Input fKeyId {
              label {Id:}
              tooltip {The unique ID of the key, used by conditions in other activators.} xywh {279 198 55 25} deactivate
            }
            Fl_Choice fKeyPicture {
              label {Key picture} open
              tooltip {Choose how the key shall look, from a list of pre defined pictures.} xywh {343 198 55 25} down_box BORDER_BOX align 8 deactivate
              code0 {fKeyPicture->add("Key");}
            } {}
          }
          Fl_Text_Editor {} {
            label {Text message:}
            tooltip {One or more lines of text that will be shown.} xywh {20 258 460 49}
            code0 {o->buffer(buf);}
          }
          Fl_Check_Button fBroadcast {
            label {Broadcast:}
            callback {if (fBroadcast->value()) {
    fBlocks->activate();
} else {
    fBlocks->deactivate();
}}
            tooltip {Everything activated will happen for all players inside a limited distance. All actions below are affected.} xywh {144 149 28 15} down_box DOWN_BOX align 4 when 1
          }
          Fl_Input fBlocks {
            label blocks
            tooltip {The distance measured in blocks to players that will receive the broadcast} xywh {172 144 55 25} align 8 deactivate
          }
        }
      }
      Fl_Return_Button {} {
        label Ok
        callback {fOk = true;
fWindow->hide();}
        tooltip {There is no way to cancel creation of an activator. But it can be removed afterwards.} xywh {45 354 95 20}
      }
    }
    code {fWindow->show();} {}
  }
  decl {bool fOk;} {public
  }
} 
